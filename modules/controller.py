import os
import traceback

from modules.database import Database
from modules.telegram import Telegram
from modules.website import Website


class Controller:
    def __init__(self, config):
        self.website = Website(config['Website'],
                               proxy_file_path=config['Proxy']['PROXY_FILE_PATH'])

        self.database = Database(config['Database'])

        self.telegram = Telegram(bot_token=os.environ.get('TELEGRAM_BOT_TOKEN'),
                                 chat_id=os.environ.get('TELEGRAM_CHAT_ID'))

        self.view_url = config['Website']['base_url'] + config['Website']['view_url']

    def update(self):
        website_count = self.website.get_count()
        database_count = self.database.count()
        if database_count == 0 or website_count < database_count:
            positions = self.website.get_positions(website_count)['response']['docs']
            data = []
            for doc in positions:
                data.append((doc['REC_KEY'], doc['EA_ISBN']))
            self.database.reload(data)
        elif website_count > database_count:
            positions = self.website.get_positions(website_count)['response']['docs']
            for doc in positions:
                if self.database.is_unique(doc['REC_KEY'], doc['EA_ISBN']):
                    self.telegram.write('–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: ' + self.view_url + doc['EA_ISBN'])
                    # print(time.strftime('[%x %X] ', time.localtime()) + '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç')

    def start(self):
        # start_time = time.time()
        # last_time = start_time
        update_counter = 0
        # print(time.strftime('[%x %X] ', time.localtime()) + '–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
        while True:
            try:
                self.update()
            except Exception as exception:
                self.telegram.write(
                    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ ü•∞\n\n‚ö† : ' + str(traceback.format_exc()))
                raise exception
            update_counter += 1
            # current_time = time.time()
            # print(time.strftime('[%x %X] ', time.localtime()) + '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏: ' +
            #       f'{str((current_time - last_time)):.{10}}' + ' —Å–µ–∫—É–Ω–¥')
            # if update_counter % 50 == 0:
            #     print(time.strftime('[%x %X] ', time.localtime()) + '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ [' +
            #           str(update_counter) + '] –∏—Ç–µ—Ä–∞—Ü–∏–π: ' +
            #           f'{str((current_time - start_time) / update_counter):.{10}}' + ' —Å–µ–∫—É–Ω–¥')
            if update_counter % 50000 == 0:
                self.database.commit()
                update_counter %= 50000
            # last_time = current_time
